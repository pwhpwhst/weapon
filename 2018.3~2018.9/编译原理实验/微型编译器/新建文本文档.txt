


D:
cd D:\DaiMaWuQiKu\阿里云
git status -s

git add 阿里云/新建文本文档.txt
git commit -m 版本提交
git push
git config --global credential.helper store
git pull

==========================================

 git rm -r --cached .
 git add .
 git commit -m 'update .gitignore'


===========================================


打印语法树:
condition
|
---------------------------------------------------
|                          |               |      |
type-specifier-seq         declarator      '='    assignment-expression
|                          |                      |
-                          -                      -
|                          |                      |
type-specifier             'identifier'           'number'
|
-
|
'simple-type-specifier'


carry out Condition_0_SDT_genertor
carry out Declarator_0_SDT_genertor
carry out Condition_0_SDT_genertor
carry out Type_specifier_seq_0_SDT_genertor
carry out Type_specifier_0_SDT_genertor
carry out Type_specifier_seq_0_SDT_genertor
carry out Condition_0_SDT_genertor


=====================================
中文乱码的解决方法
https://www.cnblogs.com/didiaodidiao/p/9189463.html

D:
cd D:\Users\Administrator\Desktop\project2018.3_2018.9\2018.3~2018.9\编译原理实验\微型编译器

g++ -std=c++11  -g -finput-charset=UTF-8 -fexec-charset=GBK  -c pwh.cpp
g++ -std=c++11  -g -finput-charset=UTF-8 -fexec-charset=GBK  -c slr.cpp


flex.exe  SLR\wordParser.l
gcc -c lex.yy.c

g++ -std=c++11  -c SDT_generator_generator.cpp
g++ -std=c++11 -o SDT_generator_generator SDT_generator_generator.o
SDT_generator_generator.exe
g++ -std=c++11   -c SDT\SDT_generator.cpp


g++ -std=c++11  -g -finput-charset=UTF-8 -fexec-charset=GBK  -c symbols\Array.cpp
g++ -std=c++11  -g -finput-charset=UTF-8 -fexec-charset=GBK  -c symbols\Env.cpp
g++ -std=c++11  -g -finput-charset=UTF-8 -fexec-charset=GBK  -c symbols\SmbolInfo.cpp
g++ -std=c++11  -g -finput-charset=UTF-8 -fexec-charset=GBK  -c symbols\CompileInfo.cpp

g++ -std=c++11  -g -finput-charset=UTF-8 -fexec-charset=GBK  -c symbols\Tag.cpp
g++ -std=c++11  -g -finput-charset=UTF-8 -fexec-charset=GBK  -c symbols\Token.cpp
g++ -std=c++11  -g -finput-charset=UTF-8 -fexec-charset=GBK  -c symbols\Type.cpp




g++ -std=c++11  -g -finput-charset=UTF-8 -fexec-charset=GBK  -c SLR\Item.cpp
g++ -std=c++11  -g -finput-charset=UTF-8 -fexec-charset=GBK  -c SLR\Lex_Word.cpp
g++ -std=c++11  -g -finput-charset=UTF-8 -fexec-charset=GBK  -c SLR\Node.cpp
g++ -std=c++11  -g -finput-charset=UTF-8 -fexec-charset=GBK  -c SLR\Rule.cpp




g++  -g -finput-charset=UTF-8 -fexec-charset=GBK  -o pwh pwh.o slr.o lex.yy.o SDT_generator.o Array.o Env.o CompileInfo.o SmbolInfo.o Tag.o Token.o Type.o Item.o Lex_Word.o Node.o Rule.o


pwh.exe
======================================


flex.exe  SLR\wordParser.l
gcc -c lex.yy.c

g++  -g -finput-charset=UTF-8 -fexec-charset=GBK  -o pwh pwh.o slr.o lex.yy.o SDT_generator.o Array.o Env.o CompileInfo.o SmbolInfo.o Tag.o Token.o Type.o Item.o Lex_Word.o Node.o Rule.o
pwh.exe

======================================

type-name:
class-name
enum-name
typedef-name


=======================

sign (\+|\-)
unsigned-suffix	(u|U)
long-suffix	(l|L)
floating-suffix	(f|F|l|L)
integer-suffix	(((u|U)(l|L)?)|((l|L)(u|U)?))
hexadecimal-digit [0-9a-fA-F]
octal-digit [0-7]
nonzero-digit [1-9]
digit [0-9]
hex-quad [0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]
universal-character-name \\u{hex-quad}|\\U{hex-quad}{hex-quad}
nondigit ({universal-character-name}|[_a-zA-Z])
digit-sequence {digit}+
fractional-constant ({digit-sequence}?\.{digit-sequence}|{digit-sequence}\.)
exponent-part (e|E){sign}?{digit-sequence}
octal-escape-sequence (\\{octal-digit}|\\{octal-digit}{octal-digit}|\\{octal-digit}{octal-digit}{octal-digit})
simple-escape-sequence (\\'|\\\"|\\\?|\\\\|\\a|\\b|\\f|\\n|\\r|\\t|\\v)
hexadecimal-escape-sequence \\x[0-9a-fA-F]+
escape-sequence ({octal-escape-sequence}|{simple-escape-sequence}|{hexadecimal-escape-sequence})
pp-number \.?{digit}({digit}|{nondigit}|(e|E){sign}|\.)+
preprocessing-op-or-punc (\{|\}|\[|\]|\#|\#\#|\(|\)|\<\:|\:\>|\<\%|\%\>|\%\:|\%\:\%\:|\;|\:|\.\.\.|new|delete|\?|\:\:|\.|\.\*|\+|\-|\*|\/|\%|\ˆ|\&|\||\˜|\!|\=|\<|\>|\+\=|\-\=|\*\=|\/\=|\%\=|\ˆ\=|\&\=|\|\=|\<\<|\>\>|\>\>\=|\<\<\=|\=\=|\!\=|\<\=|\>\=|\&\&|\|\||\+\+|\-\-|\,|\-\>\*|\-\>|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|xor|xor_eq)
octal-literal 0{octal-digit}+
hexadecimal-literal (0x|0X)[0-9a-fA-F]+
decimal-literal [1-9][0-9]*
integer-literal ({decimal-literal}|{octal-literal}|{hexadecimal-literal})({integer-suffix})?
floating-literal ({fractional-constant}{exponent-part}?{floating-suffix}?|{digit-sequence}{exponent-part}{floating-suffix}?)
s-char [^\"\\\n]|{escape-sequence}|{universal-character-name}
c-char [^\'\\\n]|{escape-sequence}|{universal-character-name}
h-char [^\"\n]
q-char [^\>\n]
s-char-sequence {s-char}+
c-char-sequence {c-char}+ 
h-char-sequence {h-char}+
q-char-sequence {q-char}+
string-literal L?\"{s-char-sequence}?\"
character-literal L?\'{c-char-sequence}?\'
boolean-literal true|false
header-name \<{h-char-sequence}\>|\"{q-char-sequence}\"
literal {string-literal}|{character-literal}|{boolean-literal}|{floating-literal}|{integer-literal}
keyword alignas|alignof|and|and_eq|asm|atomic_cancel|atomic_commit|atomic_noexcept|auto|bitand|bitor|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|false|float|for|friend|goto|if|inline|int|long|mutable|namespace|new|noexcept|not|not_eq|nullptr|operator|or|or_eq|private|protected|public|reflexpr|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|synchronized|template|this|thread_local|throw|true|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while|xor|xor_eq
operator new|delete|new\[\]|delete\[\]|\+|\-|\*|\/|\%|\ˆ|\&|\||\˜|\!|\=|\<|\>|\+\=|\-\=|\*\=|\/\=|\%\=|\ˆ\=|\&\=|\|\=|\<\<|\>\>|\>\>\=|\<\<\=|\=\=|\!\=|\<\=|\>\=|\&\&|\|\||\+\+|\-\-|\,|\-\>\*|\-\>|\(\)|\[\]
token {identifier}|{keyword}|{literal}|{operator}





{string-literal} {
 write_word(p_lex_word,yytext,"'string-literal'");
  p_lex_word++;
}

{character-literal} {
 write_word(p_lex_word,yytext,"'character-literal'");
  p_lex_word++;
}

{boolean-literal} {
 write_word(p_lex_word,yytext,"'boolean-literal'");
  p_lex_word++;
}

{floating-literal} {
 write_word(p_lex_word,yytext,"'floating-literal'");
  p_lex_word++;
}

{integer-literal} {
 write_word(p_lex_word,yytext,"'integer-literal'");
  p_lex_word++;
}




{header-name} {
 write_word(p_lex_word,yytext,"'header-name'");
  p_lex_word++;
}



{preprocessing-op-or-punc} {
 write_word(p_lex_word,yytext,"'preprocessing-op-or-punc'");
  p_lex_word++;
}




ype-name:
class-name
enum-name
typedef-name


class-name:
identifier