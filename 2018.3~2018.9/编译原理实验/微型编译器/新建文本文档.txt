D:
cd D:\Users\Administrator\Desktop\project2018.3_2018.9\2018.3~2018.9\编译原理实验\微型编译器

F:
cd F:\codeWeaponStore\2018.3~2018.9\编译原理实验\微型编译器

g++ -std=c++11 -c pwh.cpp

g++ -std=c++11 -c symbols\Array.cpp
g++ -std=c++11 -c symbols\Env.cpp
g++ -std=c++11 -c symbols\Type.cpp

flex.exe  SLR\wordParser.l
gcc -c lex.yy.c
g++ -std=c++11 -c SLR\Lex_Word.cpp
g++ -std=c++11 -c SLR\Rule.cpp
g++ -std=c++11 -c SLR\Item.cpp
g++ -std=c++11 -c SLR\Node.cpp
g++ -std=c++11 -c SLR\Symbol.cpp


g++ -std=c++11 -c SDT\SDT_generator.cpp
g++ -std=c++11 -c lexer\Token.cpp
g++ -std=c++11 -c lexer\Integer.cpp
g++ -std=c++11 -c lexer\Tag.cpp
g++ -std=c++11 -c lexer\Word.cpp
g++ -std=c++11 -c inter\Id.cpp



g++ -o pwh pwh.o Array.o Env.o Type.o lex.yy.o Lex_Word.o Rule.o Item.o Node.o Symbol.o SDT_generator.o Token.o Integer.o Tag.o Word.o Id.o


pwh.exe >a.txt


g++ -std=c++11 -c SDT_generator_generator.cpp
g++ -std=c++11 -o SDT_generator_generator SDT_generator_generator.o
SDT_generator_generator.exe

==========================================

SDT_genertor

//生成ruleListing
	↓
new Rule(rule_str)


ele_begin : T		{$$=$0;}
T : B C			{$2.next=$0;$$=$2;}
B : 'simple-type-specifier'	{Type* type=new Type($0,Tag::BASIC,4);$$=type;}
C : 0	{$$=$$.next;}
C : '[' 'number' ']' C	{$4.next=$$.next;$$=new Array(atoi($2.c_str()),(Type*)$4);}	


fs<<e<<endl;

int startsWith(string s, string sub);
int endsWith(string s,string sub);
void lower_first_char(string &word)