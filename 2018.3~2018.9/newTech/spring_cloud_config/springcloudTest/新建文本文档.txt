参考地址：https://cloud.spring.io/spring-cloud-config/#quick-start

1、application.properties与application.yml的区别
https://www.cnblogs.com/baoyi/p/SpringBoot_YML.html

2、pom.xml 注意要有这样的配置：

<plugin>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-maven-plugin</artifactId>
</plugin>

3、要先启动rabbitmq


4、
4.1、To run your own server use the spring-cloud-config-server dependency and @EnableConfigServer.
4.2.1、If you set spring.config.name=configserver the app will run on port 8888 and serve data from a sample repository.
4.2.2、  4.2.1是比较简单的方法，也可以用这种方法：（note：On Windows, you need an extra "/" in the file URL if it is absolute with a drive prefix (for example,file:///${user.home}/config-repo).）

server.port: 8888
spring.cloud.config.server.git.uri: file://${user.home}/config-repo

4.3、You need a spring.cloud.config.server.git.uri to locate the configuration data for your own needs

5、访问 http://localhost:8888/configserver-0.0.1-SNAPSHOT/env
	↓
{"name":"configserver-0.0.1-SNAPSHOT",
"profiles":["env"],
"label":"master",
"version":"a611374438e75aa1b9808908c57833480944e1a8",
"state":null,
"propertySources":[{"name":"https://github.com/spring-cloud-samples/config-repo/application.yml",
"source":{"info.description":"Spring Cloud Samples",
"info.url":"https://github.com/spring-cloud-samples",
"eureka.client.serviceUrl.defaultZone":"http://localhost:8761/eureka/",
"foo":"baz"}}]}


====================================================================





官方原型：https://github.com/spring-cloud-samples/configserver
cd C:\Users\pan.weihao\Desktop\configserver
mvn clean package
java -jar target/configserver-0.0.1-SNAPSHOT.jar
java -jar configserver-0.0.1-SNAPSHOT.jar



自己做的原型：
D:
cd D:\Users\pan.weihao\workspace\project2018.3_2018.9\2018.3~2018.9\newTech\spring_cloud_config\springcloudTest
mvn clean package
java -jar target/springcloudTest-0.0.1-SNAPSHOT.jar

  security:
    enabled: false

#https://github.com/spring-cloud-samples/config-repo
#是否需要权限拉去，默认是true,如果不false就不允许你去拉取配置中心Server更新的内容



1、The HTTP service has resources in the following form:（这些其实具体是git上的文件，label对应git的分支（commit id, branch name, or tag），默认为master）

 If the git branch or tag name contains a slash (/), 
 then the label in the HTTP URL should instead be specified with the special string (_) (to avoid ambiguity with other URL paths).
 foo/bar	→	foo(_)bar

/{application}/{profile}[/{label}]
/{application}-{profile}.yml
/{label}/{application}-{profile}.yml
/{application}-{profile}.properties
/{label}/{application}-{profile}.properties
where application is injected as the spring.config.name in the SpringApplication (what is normally application in 
a regular Spring Boot app), profile is an active profile (or comma-separated list of properties),
and label is an optional git label (defaults to master.)



http://localhost:8888/configserver-0.0.1-SNAPSHOT/env	//可看到所有配置信息

http://localhost:8888/foo/development	//可看到配置信息

http://localhost:8888/configserver/cloud/master	//可看到特定配置信息（如上述英文说述）


2、可以设置http连接超时和跳过ssl认证，具体看官方文档



3、// 以下的命令是不行的，与appliaction.yml的相对路径有关
cd target
java -jar springcloudTest-0.0.1-SNAPSHOT.jar





====================================================================


改造springboot原型，接收远程参数的方法：

1、application.properties 中添加：

info.description = world3	//注意到info.description存在于http://localhost:8888/configserver-0.0.1-SNAPSHOT/env 中

2、bootstrap.properties

spring.cloud.config.uri=http://localhost:8888

3、DemoApplication.java 添加标签

import org.springframework.context.annotation.Configuration;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;


@Configuration
@EnableAutoConfiguration

4、pom.xml 中添加

	<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
    <version>2.1.0.RELEASE</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-config-client -->
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-config-client</artifactId>
    <version>2.0.2.RELEASE</version>
</dependency>

5、

	@Value("${info.description}")
	private String name = "World2";

===========================================================
客户端
D:
cd D:\Users\Administrator\Desktop\project2018.3_2018.9\2018.3~2018.9\newTech\spring_cloud_config\RemoteConfigTest
mvn clean package
cd target
java -jar RemoteConfig-1.0-SNAPSHOT.jar

http://localhost:8080/hello

http://localhost:8080/actuator/refresh	(用postman的方式刷新)

