一、基本概念

文档：{"greeting":"Hello,world!"}
集合：一组文档


一、在shell下运行

mongo
db	//查看当前数据库
use foobar	//切换数据库

基本操作
1、创建

post={"title":"My Blog Post","content":"Here's my blog post.","data":new Date()};

db.blog.insert(post);

2、查询


db.blog.find();	// blog为集合
db.blog.findOne();
db.blog.find({},{"username":1,"_id":0});//指定所需要的列

db.user.find({"age":{"$gte":18,"$lte":30}});

//in 的使用
db.raffle.find({"ticket_no":{"$in":[725,542,390]}});
db.raffle.find({"ticket_no":{"$nin":[725,542,390]}});

//or 的使用
db.raffle.find({"$or":[{"ticket_no":725},{"winner":true}]});
db.user.find({"id_num":{"$mod":[5,1]}}); //找一个除以5等于1的数
db.user.find({"id_num":{"$not":{"$mod":[5,1]}}}); 

db.users.find({"$and":[{"x":{"$lt":1}},{"x":4}]});

db.c.find({"y":null});
db.c.find({"y":{"$in":[null],"$exists":true}});
db.c.find({"name":/joe/i});


db.food.find({"fruit":{"$all":["apple","banana"]}});
db.food.find({"fruit":{"$size":3}});

db.food.find({},{"comments":{"$slice":10}});//10:返回前10条记录，-10：返回后10条记录
db.food.find({},{"comments":{"$slice":[23,10]}});//从_23之后的10条记录

db.food.find({"comments.name":"bob"},{"comments.$":1});//这样只会返回第一个匹配的文档。


db.food.find("x":{"$gt":10,"$lt":20});//针对非数组类型
db.food.find({"x":{"$elementMatch":{"$gt":10,"$lt":20}}});//针对数组

//$where 语句
db.foo.find({"$where":function(){
	for(var current in this){
	   for(var current in this){
		if(current !=other && this[current]==this[other]){
			return true;
		}
	   }
	}
	return false;
}})


3、更新
post={"title":"My Blog Post","content":"Here's my blog post.","data":new Date()};
post.comments=[];
db.blog.update({"title":"My Blog Post"},post);//把查出来的记录整个替换掉
db.people.update({"_id":ObjectId("sdafsa")},post);

3.1、"$set"、"$unset"修改器入门
>db.users.findOne()
{
	"_id":ObjectId("4b253b067525f35f94b60a31"),
	"name":"joe",
	"age":30,
	"sex":"male",
	"location":"Wisconsin"
}
db.user.update({"_id":ObjectId("4b253b067525f35f94b60a31")},{"$set":{"favorite book":"War and Peace"}});
db.user.update({"_id":ObjectId("4b253b067525f35f94b60a31")},{"$unset":{"favorite book":1}});

3.2、"$inc"
db.games.update(criteria,{"$inc":{"score":50}})

3.3、"$push"

db.user.update({"_id":ObjectId("4b253b067525f35f94b60a31")},
{"$push":{"comments":{"favorite book":"War and Peace"}}});

db.stock.ticker.update({"_id":"GOOG"},
{"$push":{"hourly":{"$each":[562.776,562.790,559.123]}}});


//压入数个记录后，根据"rating"字段排序，然后保留前10个记录
db.movies.update({"genre":"horror"},{"$push":{"top10":{
	"$each":[{"name":"Nightmare on Elm Street","rating":6.6},
		 {"name":"Saw","rating":4.3}],
	"$slice":-10,
	"$sort":{"rating":-1}}}});

3.4、$addToSet //避免重复插入记录
db.user.update({"_id":ObjectId("4b253b067525f35f94b60a31")},
{"$addToSet":{"comments":{"favorite book":"War and Peace"}}});


3.5、$pull、$pop
db.stock.ticker.update({"_id":"GOOG"},
{"$pop":{"hourly":1}});//1:从数组末尾删除一个元素，-1：从数组头部删除一个元素
db.lists.update({},{$pull:{"todo":"laundry"}}); //删除"todo"为"laundry"的数组

3.6、改变数组某一位置的值
db.blog.update({},{"$inc":{"comments.0.votes":1}});



3.7、db.user.update({"rep":25},{"$inc":{"rep":3}},true);//true:找不到匹配条件的，创建一个新的记录，并且执行更新
						      //false:找不到匹配条件的,不做任何操作

3.8、db.user.update({},{"$setOnInsert":{"createdAt":new Date()}},true);//创建记录的时候赋值，但在之后的更新操作，这个字段都不会在改变


3.9、save方法

var x=db.foo.findOne();
x.num=42
db.foo.save(x);

3.10、批量更新
db.user.update({},{},false,true);//第四个参数为true



4、删除
db.blog.remove({"title":"My Blog Post"});
db.blog.remove();//删除集合中的所有数据
db.blog.drop();


5、批量插入

db.foo.batchInsert([{"_id":0},{"_id":1},{"_id":2}]);//插入的最大长度不能超过48MB


6、游标

for(i1=0;i1<100;i1++){
	db.collection.insert({x:i1});
}

var cursor=db.collection.find();//调用find时，shell并不立即查询数据库，而是等待真正开始要求获得结果时才发送查询

var cursor=db.collection.find().limit(1).sort({"x":1}).skip(10);

while(cursor.hasNext()){
	obj=cursor.next();
}

cursor.forEach(function(x){
	print(x.name);
});
