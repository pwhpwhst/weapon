#include <iostream>
#include <windows.h>
#include <mysql.h>
#include <string>
#include <memory>
#include<sstream>
#include<vector>
#include<unordered_map>
using namespace std;
void insert_test();

//g++ -c test2.cpp
//g++ -o test2 test2.o libmysql.dll

shared_ptr<vector<unordered_map<string,string>>> queryMFSubstatus00Score();
int main(){
	insert_test();
	return 0;
}




void CubeDao::add_mf_substatus00_score(const unordered_map<string,string>& map){
	MYSQL myCont;
	mysql_init(&myCont);
	mysql_real_connect(&myCont,host.data(),user.data(),pwd.data(),schema.data(),0,NULL,CLIENT_FOUND_ROWS);

	string sub_status=map.find("sub_status")==map.end()?"0":map.at("sub_status");
	string score=map.find("score")==map.end()?"0":map.at("score");
	string parent=map.find("parent")==map.end()?"18":map.at("parent");
	string littler_brother=map.find("littler_brother")==map.end()?"18":map.at("littler_brother");
	string first_child=map.find("first_child")==map.end()?"18":map.at("first_child");
	string is_visited=map.find("is_visited")==map.end()?"0":map.at("is_visited");
	string depth=map.find("depth")==map.end()?"50":map.at("depth");
	string parentsubstatus=map.find("parentsubstatus")==map.end()?"0":map.at("parentsubstatus");

	ostringstream sql_os;

	sql_os<<"INSERT INTO mf_substatus00_score (sub_status, score, parent, littler_brother, first_child, is_visited, depth, parentsubstatus)";
	sql_os<<"values(";
	sql_os<<sub_status<<",";
	sql_os<<score<<",";
	sql_os<<parent<<",";
	sql_os<<littler_brother<<",";
	sql_os<<first_child<<",";
	sql_os<<is_visited<<",";
	sql_os<<depth<<",";
	sql_os<<parentsubstatus<<")";

	string sql=sql_os.str();

	mysql_query(&myCont, sql.data());
	mysql_close(&myCont);
}



void CubeDao::batch_add_mf_substatus00_score(const vector<unordered_map<string,string>*> & map_vector){
	MYSQL myCont;
	mysql_init(&myCont);
	mysql_real_connect(&myCont,host.data(),user.data(),pwd.data(),schema.data(),0,NULL,CLIENT_FOUND_ROWS);

	ostringstream sql_os;

	sql_os<<"INSERT INTO mf_substatus00_score (sub_status, score, parent, littler_brother, first_child, is_visited, depth, parentsubstatus)";
	sql_os<<"values";

	for(size_t i1=0;i1<map_vector.size();i1++){
		unordered_map<string,string> map=*map_vector[i1];
		string sub_status=map.find("sub_status")==map.end()?"0":map.at("sub_status");
		string score=map.find("score")==map.end()?"0":map.at("score");
		string parent=map.find("parent")==map.end()?"18":map.at("parent");
		string littler_brother=map.find("littler_brother")==map.end()?"18":map.at("littler_brother");
		string first_child=map.find("first_child")==map.end()?"18":map.at("first_child");
		string is_visited=map.find("is_visited")==map.end()?"0":map.at("is_visited");
		string depth=map.find("depth")==map.end()?"50":map.at("depth");
		string parentsubstatus=map.find("parentsubstatus")==map.end()?"0":map.at("parentsubstatus");
		sql_os<<"("<<sub_status<<",";
		sql_os<<score<<",";
		sql_os<<parent<<",";
		sql_os<<littler_brother<<",";
		sql_os<<first_child<<",";
		sql_os<<is_visited<<",";
		sql_os<<depth<<",";
		sql_os<<parentsubstatus<<")";
		if(i1!=(map_vector.size()-1)){
			sql_os<<",";
		}
	}

	string sql=sql_os.str();

	mysql_query(&myCont, sql.data());
	mysql_close(&myCont);
}
